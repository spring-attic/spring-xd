<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/integration https://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch https://www.springframework.org/schema/batch/spring-batch.xsd">

	<!-- 
		IMPORT THIS IF YOU WISH TO CREATE A JOB WITH A SINGLE PARTITIONED STEP
		Requires a "partitioner" bean and a "tasklet" bean.
	 -->

	<!-- This is the "remote" worker -->

	<int:channel id="stepExecutionRequests.input" />

	<int:channel id="stepExecutionReplies.output" />

	<int:service-activator ref="stepExecutionRequestHandler" input-channel="stepExecutionRequests.input"
			output-channel="stepExecutionReplies.output" />

	<bean id="stepExecutionRequestHandler" class="org.springframework.batch.integration.partition.StepExecutionRequestHandler"
		p:jobExplorer-ref="jobExplorer" p:stepLocator-ref="stepLocator" />

	<bean id="stepLocator" class="org.springframework.batch.integration.partition.BeanFactoryStepLocator" />

	<bean id="jobExplorer" class="org.springframework.batch.core.explore.support.SimpleJobExplorer">
		<constructor-arg ref="jobInstanceDao" />
		<constructor-arg ref="jobExecutionDao" />
		<constructor-arg ref="stepExecutionDao" />
		<constructor-arg ref="executionContextDao" />
	</bean>

	<!-- Master -->

	<bean id="partitionHandler" class="org.springframework.batch.integration.partition.MessageChannelPartitionHandler">
		<property name="messagingOperations">
			<bean class="org.springframework.integration.core.MessagingTemplate">
				<property name="defaultChannel" ref="setHeaderReplyChannelChannel" />
				<property name="receiveTimeout" value="${partitionResultsTimeout:3600000}" />
			</bean>
		</property>
		<property name="stepName" value="step1" />
	</bean>

	<int:channel id="setHeaderReplyChannelChannel" />

	<int:header-enricher input-channel="setHeaderReplyChannelChannel" output-channel="stepExecutionRequests.output">
		<int:header name="xdReplyChannel" expression="@replyChannelRegistry.channelToChannelName(headers.replyChannel)" />
	</int:header-enricher>

	<int:channel id="stepExecutionRequests.output" />

			<!-- Message Bus  -->

	<int:channel id="stepExecutionReplies.input" />

	<int:header-enricher input-channel="stepExecutionReplies.input" output-channel="resultAggregationChannel">
		<int:reply-channel expression="@replyChannelRegistry.channelNameToChannel(headers.xdReplyChannel)" overwrite="true" />
	</int:header-enricher>

	<int:channel id="resultAggregationChannel" />

	<int:aggregator ref="partitionHandler" send-timeout="10000" input-channel="resultAggregationChannel" />

	<job id="job" restartable="${restartable}" xmlns="http://www.springframework.org/schema/batch">
		<step id="step1-master">
			<partition handler="partitionHandler" partitioner="partitioner" />
		</step>
	</job>

	<bean id="jobInstanceDao"
		class="org.springframework.batch.admin.service.JdbcSearchableJobInstanceDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>

	<bean id="jobExecutionDao"
		class="org.springframework.batch.admin.service.JdbcSearchableJobExecutionDao">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="stepExecutionDao"
		class="org.springframework.batch.admin.service.JdbcSearchableStepExecutionDao">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="executionContextDao" class="org.springframework.batch.core.repository.dao.JdbcExecutionContextDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<property name="serializer">
			<bean class="org.springframework.batch.core.repository.dao.XStreamExecutionContextStringSerializer" />
		</property>
	</bean>

	<bean id="replyChannelRegistry" class="org.springframework.integration.channel.DefaultHeaderChannelRegistry">
		<constructor-arg value="${partitionResultsTimeout}" />
	</bean>

</beans>
