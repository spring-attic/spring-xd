[[creating-a-python-module]]
== Creating a Python Module

=== Introduction

Spring XD provides support for xref:Processors#shell[processor] and xref:Sinks#shell-sink[sink] modules that invoke an external shell command. You can use these to integrate a Python script with a Spring XD stream. The following `echo.py` script is a simple example which can implement a processor to simply echo the input.


[source,python]
----
#echo.py
import sys

#=====================
# Write data to stdout
#=====================
def send(data):
  sys.stdout.write(data)
  sys.stdout.flush()

#===========================================
# Terminate a message using the default CRLF 
#===========================================
def eod():
  send("\r\n")

#===========================
# Main - Echo the input
#===========================

while True:
  try:
    data = raw_input()
    if data:
      send(data)
      eod()
  except:
    break
----

To use this in a stream, create a stream definition like this:
----
xd:>stream create pytest --definition "time | shell --command='python <absolute-path-to>/echo.py' | log" --deploy
Created and deployed new stream 'pytest'
----

[NOTE]
====
Python must be installed on the host of any container to which the processor module is deployed.
====

You should see the time messages echoed in the Spring XD container log. The shell processor works by binding its message channels to the external process' `stdin` and `stdout`. Behind the scenes, the shell modules use https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html[java.lang.ProcessBuilder] to connect to the shell process. As you can see, most of `echo.py` is boilerplate code. To make things easier, Spring XD provides a https://github.com/spring-projects/spring-xd/blob/master/spring-xd-python/src/springxd/stream.py[python module] to handle all of the low level I/O.

[source, python]
----
from springxd.stream import Processor

def echo(data):
    return data

process = Processor()
process.start(echo)
----

As you can see, this creates a `Processor` object which has a `start` method to which you may pass any function that accepts a single argument and returns a value. Currently, both the input and output data must be strings. Processor uses Encoders.CRLF (`\r\n`) by default. This is how the Spring XD module delimits individual messages in the stream. Encoders.LF is also supported. The shell command processor also uses CRLF by default. 
----
xd:>stream create pytest --definition "time | shell --command='python <absolute-path-to>/echo.py' | log" --deploy
Created and deployed new stream 'pytest'
----

Alternately, you can specify the LF encoder in the Python script and the stream definition:

[source, python]
----
from springxd.stream import Processor, Encoders

def echo(data):
    return data

process = Processor(Encoders.LF)
process.start(echo)
----

----
xd:>stream create pytest --definition "time | shell --command='python <absolute-path-to>/echo.py' --encoder=LF | log" --deploy
----

The `stream` module also provides a similar `Sink` object which accepts a function that need not return a value (Sink will ignore the returned value).


[NOTE]
====
In order to import the `springxd.stream` module into your script, you must include it in your Python module search path. Python provides several ways to do this as described https://docs.python.org/2/tutorial/modules.html#the-module-search-path[here]. Spring XD python modules are included in the distribution in the 'python' directory. The stream module is designed to be version agnostic and has been tested against Python 2.7.6 and Python 3.4.2
====




