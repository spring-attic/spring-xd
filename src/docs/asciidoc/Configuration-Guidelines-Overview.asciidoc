== Overview

When running a distributed Spring XD runtime, there are a number of considerations related to performance and reliability. In most cases, these involve settings that have tradeoffs, but in this section we provide some background so you know what the options are and how to configure them.

In the xref:Deployment#deployment[Deployment] section that follows, we provide detailed information about various properties that can be passed along with the `stream deploy` command. That section also describes a scenario that is common for minimizing network hops, where direct binding can occur between modules rather than having each pipe within a stream correspond to a send and receive over the Message Bus. For more detail see the xref:Deployment#direct-binding[Direct Binding] subsection.

Another relevant topic for minimizing network hops is the ability to __compose__ modules. That is a useful technique where a subset of the stream's contiguous modules can be grouped together as if a single module. All of the pipes within the composed module will rely upon a local transport rather than sending and receiving via the Message Bus. For more detail read the xref:Modules#composing-modules[Composing Modules] section.

For production use, high availability will typically be a requirement for the data transport.  In the xref:MessageBus#messagebus[Message Bus Configuration] section below, we provide details on the relevant xref:MessageBus#rabbit-message-bus-high-availability-ha-configuration[HA configuration] settings as well as other reliability settings, security settings (including xref:MessageBus#rabbitssl[enabling SSL]), and xref:MessageBus#error-handling-message-delivery-failures[error-handling] capabilities.

When configuring a RabbitMQ Message Bus, you will also want to consider several performance settings. For example, unless strict sequential ordering is required, the __prefetch__ and __concurrency__ values should be overridden (the default for each is 1). That can lead to a significant performance improvement. In the less likely case that performance concerns completely outweigh reliability, you can disable acknowledgements and even disable the persistence of messages. For a listing of these settings and more, refer to the xref:Application-Configuration#rabbitmq-configuration[RabbitMQ Configuration] section. Several performance related configuration settings exist on the broker itself, and those are well-documented in the link:https://www.rabbitmq.com/admin-guide.html[RabbitMQ Admin Guide]. For example, the __vm_memory_high_watermark__ and __vm_memory_high_watermark_paging_ratio__ are both explained within the link:https://www.rabbitmq.com/memory.html[Flow Control] subsection of the guide.

If you are using the HTTP source module in a stream and want to scale, you can deploy multiple instances by specifying the __module.http.count__ property as described in the xref:Deployment#deployment-properties[Deployment Properties] section. Keep in mind that each instance will share the same port value. The default is 9000, but that can be overridden, for all instances, by including __--port__ as an option for the HTTP module in the stream definition. That means you would want to ensure that each container that may be a candidate for deploying one of the HTTP module instances (taking into account the __criteria__ deployment property if provided), is running on a different host, either physically or on separate virtual machines. Of course, in a production environment, you would likely want to add a load balancer in front of those HTTP endpoints.

Also when using the HTTP source module, you may want to consider enabling support for HTTPS. An example is provided in the documentation for that module's xref:Sources#http-with-options[options].
