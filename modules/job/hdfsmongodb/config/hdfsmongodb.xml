<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:hdp="http://www.springframework.org/schema/hadoop"
	   xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	   xmlns:batch="http://www.springframework.org/schema/batch"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/hadoop https://www.springframework.org/schema/hadoop/spring-hadoop.xsd
		http://www.springframework.org/schema/data/mongo https://www.springframework.org/schema/data/mongo/spring-mongo.xsd
		http://www.springframework.org/schema/batch https://www.springframework.org/schema/batch/spring-batch.xsd">

	<batch:job id="job" restartable="${restartable}">
		<batch:step id="readResourcesStep">
			<batch:tasklet>
				<batch:chunk reader="multifileReader" writer="itemWriter" commit-interval="${commitInterval}"/>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="multifileReader" class="org.springframework.batch.item.file.MultiResourceItemReader" scope="step">
		<property name="resources" value="${resources}"/>
		<property name="delegate" ref="itemReader"/>
	</bean>

	<bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="${names}"/>
						<property name="delimiter" value="${delimiter}"/>
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="org.springframework.xd.tuple.batch.TupleFieldSetMapper"/>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="itemWriter" class="org.springframework.batch.item.data.MongoItemWriter">
		<property name="template">
			<bean class="org.springframework.data.mongodb.core.MongoTemplate">
				<constructor-arg ref="mongoDbFactory"/>
				<constructor-arg ref="mappingConverter"/>
			</bean>
		</property>
		<property name="collection" value="${collectionName}"/>
	</bean>

	<bean id="hadoopFs" class="org.springframework.data.hadoop.fs.FileSystemFactoryBean">
		<property name="configuration" ref="hadoopConfiguration"/>
		<property name="close" value="false"/>
	</bean>

	<context:property-placeholder location="${xd.config.home}/hadoop.properties"/>

	<hdp:configuration
		register-url-handler="false"
		properties-location="${xd.config.home}/hadoop.properties"
		security-method="${spring.hadoop.security.authMethod:}"
		user-keytab="${spring.hadoop.security.userKeytab:}"
		user-principal="${spring.hadoop.security.userPrincipal:}"
		namenode-principal="${spring.hadoop.security.namenodePrincipal:}"
		rm-manager-principal="${spring.hadoop.security.rmManagerPrincipal:}">
		fs.defaultFS=${fsUri}
	</hdp:configuration>

	<hdp:resource-loader id="hadoopResourceLoader" file-system-ref="hadoopFs"/>

	<mongo:db-factory dbname="${databaseName}" host="${host}" port="${port}"
					  username="${username}" password="${password}"
					  authentication-dbname="${authenticationDatabaseName}"
					  write-concern="${writeConcern}"/>

	<mongo:mapping-converter>
		<mongo:custom-converters>
			<mongo:converter>
				<bean class="org.springframework.xd.mongodb.TupleWriteConverter">
					<property name="idField" value="${idField:#{null}}"/>
				</bean>
			</mongo:converter>
		</mongo:custom-converters>
	</mongo:mapping-converter>

	<bean id="defaultResourceLoader" class="org.springframework.data.hadoop.fs.CustomResourceLoaderRegistrar">
		<property name="loader" ref="hadoopResourceLoader"/>
	</bean>

</beans>
